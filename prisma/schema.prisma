generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model categories {
  id          String     @id(map: "Category_pkey")
  title       String
  parentId    String?
  description String?
  thumbnail   String?
  status      Status     @default(active)
  isFeatured  Boolean    @default(false)
  slug        String     @unique(map: "Category_slug_key")
  position    Int        @default(0)
  deleted     Boolean    @default(false)
  deletedAt   DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
  products    products[]

  @@index([parentId], map: "Category_parentId_idx")
}

model productVariants {
  id                 String               @id(map: "ProductVariant_pkey")
  productId          String
  color              String
  images             String[]
  stock              Int                  @default(0)
  inventoryMovements inventoryMovements[]
  orderItems         orderItems[]
  products           products             @relation(fields: [productId], references: [id], onDelete: Cascade, map: "ProductVariant_productId_fkey")

  @@index([productId], map: "ProductVariant_productId_idx")
}

model products {
  id                 String               @id(map: "Product_pkey")
  title              String
  description        String?
  price              Int
  discount           Int                  @default(0)
  categoryId         String
  size               String[]
  thumbnail          String
  status             Status               @default(active)
  deleted            Boolean              @default(false)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now())
  slug               String               @default("")
  soldCount          Int                  @default(0)
  ratingAvg          Float                @default(0)
  ratingCount        Int                  @default(0)
  inventoryMovements inventoryMovements[]
  orderItems         orderItems[]
  productVariants    productVariants[]
  categories         categories           @relation(fields: [categoryId], references: [id], map: "Product_categoryId_fkey")
  reviews            reviews[]

  @@index([categoryId], map: "Product_categoryId_idx")
  @@index([status, deleted], map: "Product_status_deleted_idx")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model users {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  full_name  String
  email      String    @unique
  password   String
  token_user String    @unique
  phone      String?   @db.VarChar(20)
  avatar     String?
  status     String    @default("active")
  deleted    Boolean   @default(false)
  deleted_at DateTime? @db.Timestamptz(6)
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  updated_at DateTime  @default(now()) @db.Timestamptz(6)
  gender     String?
  dob        DateTime? @db.Date
  address    String?
  height_cm  Int?
  weight_kg  Decimal?  @db.Decimal(5, 1)
  orders     orders[]
  reviews    reviews[]
}

model inventoryMovements {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productId       String
  variantId       String?
  orderItemId     String?          @db.Uuid
  delta           Int
  reason          StockReason
  refOrderId      String?
  note            String?
  createdAt       DateTime         @default(now()) @db.Timestamptz(6)
  orderItems      orderItems?      @relation(fields: [orderItemId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "inv_orderItem_fkey")
  products        products         @relation(fields: [productId], references: [id], onUpdate: NoAction, map: "inv_product_fkey")
  productVariants productVariants? @relation(fields: [variantId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "inv_variant_fkey")

  @@index([orderItemId], map: "inv_orderItem_idx")
  @@index([productId, createdAt], map: "inv_product_created_idx")
  @@index([variantId], map: "inv_variant_idx")
}

model orderItems {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderId            String               @db.Uuid
  productId          String
  variantId          String?
  titleSnap          String
  priceSnap          Int
  quantity           Int                  @default(1)
  createdAt          DateTime             @default(now()) @db.Timestamptz(6)
  inventoryMovements inventoryMovements[]
  orders             orders               @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  products           products             @relation(fields: [productId], references: [id], onUpdate: NoAction)
  productVariants    productVariants?     @relation(fields: [variantId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  reviews            reviews[]

  @@index([orderId])
  @@index([productId])
  @@index([variantId])
}

model orders {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String        @db.Uuid
  status        OrderStatus   @default(pending)
  paymentStatus PaymentStatus @default(unpaid)
  total         Int           @default(0)
  note          String?
  createdAt     DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime      @default(now()) @db.Timestamptz(6)
  orderItems    orderItems[]
  users         users         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([status, paymentStatus], map: "orders_status_pay_idx")
  @@index([userId, status])
}

model reviews {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String      @db.Uuid
  productId   String
  orderItemId String?     @db.Uuid
  rating      Int
  content     String?
  images      String[]    @default([])
  createdAt   DateTime    @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime    @default(now()) @db.Timestamptz(6)
  orderItems  orderItems? @relation(fields: [orderItemId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  products    products    @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users       users       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, productId], map: "reviews_user_product_uidx")
  @@index([productId, rating], map: "reviews_product_rating_idx")
}

enum Status {
  active
  inactive
}

enum OrderStatus {
  pending
  paid
  shipped
  completed
  cancelled
}

enum PaymentStatus {
  unpaid
  paid
  refunded
}

enum StockReason {
  manualImport
  manualAdjust
  orderPlaced
  orderCancelled
  returnIn
  returnOut
}
